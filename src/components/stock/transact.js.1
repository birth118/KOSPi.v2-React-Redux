import React, { Component } from 'react'
import { connect } from 'react-redux'


import { client } from '../../apis'
import { BuyOrSell, digitConv } from "../../utils";
import { setAlert } from "../../actions";
import Alert from '../layout/alert'


class Transact extends Component {

  // const [stock, setStock] = React.useState(null)
  // const [formData, setFormData] = React.useState({
  //   companyName: '',
  //   companyCode: '',
  //   price: 0,
  //   amount: 0,
  //   buyOrSell: 'BUY',
  //   per: 0,
  //   pbr: 0,
  //   kospi: 0,
  //   kosdaq: 0,
  //   comment: '매매사유: 싸니까...'
  // })

  state = {
    update: null,
    stock: null,
    formData: {
      companyName: '',
      companyCode: '',
      price: 0,
      amount: 0,
      buyOrSell: 'BUY',
      per: 0,
      pbr: 0,
      kospi: 0,
      kosdaq: 0,
      comment: '매매사유: 싸니까...'
    }
  }


  // const {
  //   companyName,
  //   companyCode,
  //   price,
  //   amount,
  //   buyOrSell,
  //   per,
  //   pbr,
  //   kospi,
  //   kosdaq,
  //   comment
  // } = formData



  componentDidMount = () => {
    const { stockcode } = this.props.match.params
    //console.log(stockcode);

    client.get(`/api/stockcode/${stockcode}`)
      .then(({ data }) => {
        //     console.log(data);
        this.setState({ stock: data })

        this.setState({
          formData: {
            ...this.state.formData,
            companyName: data.companyName,
            companyCode: data.companyCode,
            price: data.previousPrice,
            per: data.avgPER,
            pbr: data.avgPBR
          }
        })

      }).catch((err) => {
        console.log(err.response);
      })

  }

  componentDidUpdae = () => {
    console.log('ComponentDidUpdae');
  }


  onFormSubmit = (e) => {
    e.preventDefault()
    console.log(this.state.formData);
    client.post('/api/transact', this.state.formData)
      .then(({ data }) => {
        console.log(data);
        this.props.setAlert('매매 등록')
        this.setState({ update: 'update' })
      })
      .catch((err) => { this.props.setAlert(err.response.data.errors[0].message) })
  }

  onChange = (e) => {

    this.setState({ formData: { ...this.state.formData, [e.target.name]: e.target.value } })
  }


  onBuyOrSellChange = (e) => {
    //  console.log(e.target.value);
    this.setState({ formData: { ...this.state.formData, [e.target.name]: e.target.value } })
  }

  render() {
    return (
      <div>
        {!this.state.stock ? <h3> Loading...</h3> :
          <div>
            <h3 className="ui dividing header"> Transaction </h3>

            <div className="grid stackable ui">
              <div className="row ui">
                {/* TRANSACTIION form*/}

                <div className="ten wide column">

                  <form className="ui form" onSubmit={this.onFormSubmit}>

                    <div className="grouped fields">

                      <div className="field">
                        <div className="ui radio checkbox">
                          <input type="radio" name="buyOrSell" value={BuyOrSell.BUY} tabIndex='0' required autoFocus
                            onChange={(e) => {
                              this.onBuyOrSellChange(e)
                            }}
                          // onChange={onBuyOrSellChange}
                          />
                          <label>Buy 매수</label>
                        </div>
                      </div>
                      <div className="field">
                        <div className="ui radio checkbox">
                          <input type="radio" name="buyOrSell" value={BuyOrSell.SELL}

                            onChange={this.onBuyOrSellChange}
                          />
                          <label>Sell 매도</label>
                        </div>
                      </div>
                    </div>

                    <hr />

                    <div className="fields">
                      <div className="field ">
                        <label>종목명</label>
                        <div className="ui disabled input">
                          <input type="text" name="companyName" value={this.state.formData.companyName} tabIndex='-1' readOnly />
                        </div>

                      </div>
                    </div>
                    <div className="fields">
                      <div className="field">
                        <label>수량 Amount</label>
                        <input type="text" name="amount" placeholder="10" value={this.state.formData.amount} onChange={this.onChange} required />
                      </div>
                      <div className="field">
                        <label>가격 Price</label>
                        <input type="text" name="price" placeholder="12000" value={this.state.formData.price} onChange={this.onChange} required />
                      </div>
                      <div className="field">
                        <label>PER</label>
                        <div className="ui disabled input">
                          <input type="text" name="per" placeholder="0312345" value={this.state.formData.per} onChange={this.onChange} required />
                        </div>
                      </div>
                      <div className="field">
                        <label>PBR</label>
                        <input type="text" name="pbr" placeholder="0312345" value={this.state.formData.pbr} onChange={this.onChange} required />
                      </div>
                    </div>

                    <div className="fields">
                      <div className="field">
                        <label>KOSPI</label>
                        <div className="ui disabled input">
                          <input type="text" name="kospi" placeholder="3200" value={this.state.formData.kospi} onChange={this.onChange} required />
                        </div>
                      </div>

                      <div className="field">
                        <label>KOSDAQ</label>
                        <div className="ui disabled input">
                          <input type="text" name="kosdaq" placeholder="1000" value={this.state.formData.kosdaq} onChange={this.onChange} required />
                        </div>
                      </div>
                    </div>


                    <div className="field">
                      <label>매매사유</label>
                      <textarea name="comment" value={this.state.formData.comment} rows="2" placeholder="" onChange={this.onChange} required> 매매사유: 싸니까...</textarea>
                    </div>




                    <hr />

                    <Alert />
                    <button className="ui fluid large teal submit button">Submit</button>
                  </form>


                </div>

                {/* SUMMARY Table */}
                <div className="six wide column">
                  <table className="ui unstackable table">
                    <thead>
                      <tr>
                        <th>종목명</th><th className="right aligned">{this.state.stock.companyName}</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr><td>WICS</td><td className="right aligned">{this.state.stock.wics}</td></tr>
                      <tr><td>보유수</td><td className="right aligned">{this.state.stock.holdings}</td></tr>
                      <tr><td>평단가</td><td className="right aligned">{this.state.stock.avgBuyingPrice}</td></tr>
                      <tr><td>현시가</td><td className="right aligned">{this.state.stock.currentPrice}</td></tr>
                      <tr><td>수익률</td><td className="right aligned">{digitConv(this.state.stock.currentPrice / this.state.stock.avgBuyingPrice, 2)}%</td></tr>
                      <tr><td>평균 PER</td><td className="right aligned">{this.state.stock.avgPER}</td></tr>
                      <tr><td>평균 PBR</td><td className="right aligned">{this.state.stock.avgPBR}</td></tr>
                      <tr><td>내재가치</td><td className="right aligned">{this.state.stock.intrinsic}</td></tr>
                      <tr><td>EV/EBITDA</td><td className="right aligned">{this.state.stock.evEbitda}</td></tr>
                      <tr><td>지난 매매가</td><td className="right aligned">{this.state.stock.previousPrice}</td></tr>
                      <tr><td>지난 매매일</td><td className="right aligned">{new Date(this.state.stock.previousDate).toLocaleDateString('en-US')}</td></tr>

                    </tbody>
                  </table>

                </div>
              </div>
            </div>



          </div>}

      </div>
    )
  }


}



export default connect(null, { setAlert })(Transact)




/* {
  "holdings": 0,
  "avgBuyingPrice": 0,
  "avgPER": 0,
  "avgPBR": 0,
  "evEbitda": 0,
  "previousPrice": 0,
  "previousDate": "2021-02-02T00:55:28.380Z",
  "currentPrice": 0,
  "intrinsic": 0,
  "currency": "KRW",
  "market": "KOSPI",
  "_id": "6018a323ff8fda4c8e7ae08c",
  "userId": "6017559653a7672a98162a5f",
  "companyName": "SK텔레콤",
  "companyCode": "012345",
  "wics": "전기전자",
  "createdAt": "2021-02-02T00:56:03.796Z",
  "updatedAt": "2021-02-02T00:56:03.796Z",
  "__v": 0
} */